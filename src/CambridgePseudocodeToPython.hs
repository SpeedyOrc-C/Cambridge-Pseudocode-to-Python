module CambridgePseudocodeToPython (translate) where

import MyParser (Parser(run))
import CpAdt ( getSpecial, getImplementation )
import CpParser (cpProgramP)
import CpDump (dump, initialState)

import Data.List (intercalate)


translate :: String -> Maybe String
translate pseudocode = do
    (_, program) <- run cpProgramP pseudocode

    let implementationOutput =
            intercalate "\n" $ getImplementation <$> getSpecial program
    let programOutput = snd $  dump (initialState, program)
    
    Just $
        "# Generated by campseudo-to-py\n\n" ++
        implementationOutput ++
        (if not (null implementationOutput)
            then "\n# Main program\n\n"
            else "") ++
        programOutput
